<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学无止境</title>
  
  
  <link href="https://blog.chanceyliu.com/atom.xml" rel="self"/>
  
  <link href="https://blog.chanceyliu.com/"/>
  <updated>2021-10-09T08:31:03.206Z</updated>
  <id>https://blog.chanceyliu.com/</id>
  
  <author>
    <name>Chanceyliu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React获取图片色值</title>
    <link href="https://blog.chanceyliu.com/2021/09/25/React%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E8%89%B2%E5%80%BC/"/>
    <id>https://blog.chanceyliu.com/2021/09/25/React%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E8%89%B2%E5%80%BC/</id>
    <published>2021-09-25T10:33:07.000Z</published>
    <updated>2021-10-09T08:31:03.206Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本片文章主要涉及两个场景：</p><ol><li> 根据图片的平均色值获取文字的最佳显示颜色</li><li> 提取图片的主题色</li></ol></blockquote><h3 id="一、根据图片的平均色值获取文字的最佳显示颜色"><a href="#一、根据图片的平均色值获取文字的最佳显示颜色" class="headerlink" title="一、根据图片的平均色值获取文字的最佳显示颜色"></a>一、根据图片的平均色值获取文字的最佳显示颜色</h3><p>登录页面由登录框，铺满背景的图片，位于背景图片上方的文字构成，背景图片可配置，如下图。如果这时候文字的颜色固定为白色，图片配置为白雪背景的图片，那么就会出现版权信息与白色背景太过相似，而显示不清晰的情况。思路是通过计算图片的平均色值，基于此判断文本应该为黑色或白色能够拥有更高的对比度。具体实现过程如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f241430499b24d6cb4d1bf95de4e1544~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20210925165445682"></p><h5 id="1-创建图片标签"><a href="#1-创建图片标签" class="headerlink" title="1. 创建图片标签"></a>1. 创建图片标签</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createImage = (url: string): <span class="built_in">Promise</span>&lt;HTMLImageElement&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">    image.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> resolve(image));</span><br><span class="line">    image.addEventListener(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> reject(error));</span><br><span class="line">    <span class="comment">// 图片添加跨域</span></span><br><span class="line">    image.setAttribute(<span class="string">&quot;crossOrigin&quot;</span>, <span class="string">&quot;anonymous&quot;</span>);</span><br><span class="line">    image.src = url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-将图片绘制到-canvas-容器中，获取其像素数组"><a href="#2-将图片绘制到-canvas-容器中，获取其像素数组" class="headerlink" title="2. 将图片绘制到 canvas 容器中，获取其像素数组"></a>2. 将图片绘制到 <code>canvas</code> 容器中，获取其像素数组</h5><p>这里因为我获取的是局部图片而非整张图片的像素数组，所以针对截取哪部分，做了一下处理。即可以通过传入相应的比例系数截取指定部分，其实就是相当于对 <code>canvas </code>的 <code>drawImage</code> 方法的参数做了一下处理。如果截取整张图片就要简单的多，可以看一下该方法的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage">文档</a></p><p>这里的参数含义如下图：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b23086443d441ed80e632098617b584~tplv-k3u1fbpfcp-zoom-1.image" style="zoom:50%;" /><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getImgData = <span class="keyword">async</span> (</span><br><span class="line">  params: GetImgDataParams</span><br><span class="line">): <span class="built_in">Promise</span>&lt;GetImgDataRes&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    imgSrc,</span><br><span class="line">    xMultiple = <span class="number">0</span>,</span><br><span class="line">    yMultiple = <span class="number">0</span>,</span><br><span class="line">    wMultiple = <span class="number">1</span>,</span><br><span class="line">    hMultiple = <span class="number">1</span>,</span><br><span class="line">  &#125; = params;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> multipleArr = [xMultiple, yMultiple, wMultiple, hMultiple];</span><br><span class="line">  <span class="keyword">const</span> isVerify = multipleArr.every(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt;= <span class="number">0</span> &amp;&amp; item &lt;= <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (!isVerify) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;请输入合法的比例系数，即大于0小于1的数字&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> myCanvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> bgImg = <span class="keyword">await</span> createImage(imgSrc);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> iHeight = bgImg.height;</span><br><span class="line">  <span class="keyword">const</span> iWidth = bgImg.width;</span><br><span class="line">  <span class="keyword">const</span> canvasWidth = iWidth * wMultiple;</span><br><span class="line">  <span class="keyword">const</span> canvasHeight = iHeight * hMultiple;</span><br><span class="line">  <span class="keyword">const</span> canvasSize = canvasWidth * canvasHeight;</span><br><span class="line"></span><br><span class="line">  myCanvas.width = iWidth * wMultiple;</span><br><span class="line">  myCanvas.height = iHeight * hMultiple;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ctx = myCanvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!ctx) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Canvas创建失败&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.drawImage(</span><br><span class="line">    bgImg,</span><br><span class="line">    iWidth * xMultiple,</span><br><span class="line">    iHeight * yMultiple,</span><br><span class="line">    canvasWidth,</span><br><span class="line">    canvasHeight,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    canvasWidth,</span><br><span class="line">    canvasHeight</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取canvas中图像的像素数据</span></span><br><span class="line">  <span class="keyword">const</span> data = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvasWidth, canvasHeight).data;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">data</span>: data, <span class="attr">canvasSize</span>: canvasSize &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="3-根据像素数组计算出平均像素"><a href="#3-根据像素数组计算出平均像素" class="headerlink" title="3. 根据像素数组计算出平均像素"></a>3. 根据像素数组计算出平均像素</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getAverageColor = (params: GetImgDataRes): number[] =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, canvasSize &#125; = params;</span><br><span class="line">  <span class="keyword">let</span> r = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> g = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, offset; i &lt; canvasSize; i++) &#123;</span><br><span class="line">    offset = i * <span class="number">4</span>;</span><br><span class="line">    r = data[offset + <span class="number">0</span>];</span><br><span class="line">    g = data[offset + <span class="number">1</span>];</span><br><span class="line">    b = data[offset + <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 求取平均值</span></span><br><span class="line">  r = <span class="built_in">Math</span>.round(r / canvasSize);</span><br><span class="line">  g = <span class="built_in">Math</span>.round(g / canvasSize);</span><br><span class="line">  b = <span class="built_in">Math</span>.round(b / canvasSize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [r, g, b];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里解释一下这个为什么要这样写，看下面这张图你就明白了。我们通过 <code>getImageData</code> 得到的像素数组<strong>是一个一维数组，包含以 RGBA 顺序的数据，数据使用 0 至 255（包含）的整数表示。</strong>就像这样： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/333c97e06edf4354a7cec8e274946963~tplv-k3u1fbpfcp-zoom-1.image" alt="preview"></p><h5 id="4-使用平均像素计算-YIQ-值，通过该值判断文本显示颜色。"><a href="#4-使用平均像素计算-YIQ-值，通过该值判断文本显示颜色。" class="headerlink" title="4. 使用平均像素计算 YIQ 值，通过该值判断文本显示颜色。"></a>4. 使用平均像素计算 <code>YIQ</code> 值，通过该值判断文本显示颜色。</h5><p><code>YIQ</code>值具体指什么感兴趣的可以查一下，我这里直接解释为色系，就是通过这个值<strong>判断色彩是偏黑色系还是白色系</strong>。从而判断文本应该是黑色还是白色，基于哪个会具有更高的对比度，以此来提供最佳的可读性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getContrastYIQ = <span class="function">(<span class="params">r: number, g: number, b: number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> yiq = (r * <span class="number">299</span> + g * <span class="number">587</span> + b * <span class="number">114</span>) / <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> yiq &gt;= <span class="number">128</span> ? <span class="string">&quot;black&quot;</span> : <span class="string">&quot;white&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>像这样，总能找到合适的显示颜色：</p><p><img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/localhost_3001_theme-color.png" alt="localhost_3001_theme-color"></p><hr><h3 id="二、提取图片的主题色"><a href="#二、提取图片的主题色" class="headerlink" title="二、提取图片的主题色"></a>二、提取图片的主题色</h3><p>上传一张主题图片，提取该图片中的主题色。一开始我是打算直接使用 <a href="https://github.com/lokesh/color-thief">color-thief</a> 的，参照官方文档中的使用 <code>ES6</code> 方式引入行不通，我就去看了一下源代码，一通研究之下发现其实挺简单，最核心的代码是引入 <code>quantize</code> 包处理颜色数组的一段，下面我会讲到，于是我就基于他的源码做了一下处理。以下是实现过程：</p><h5 id="1-绘制图片到-canvas-中，提取颜色数组"><a href="#1-绘制图片到-canvas-中，提取颜色数组" class="headerlink" title="1. 绘制图片到 canvas 中，提取颜色数组"></a>1. 绘制图片到 canvas 中，提取颜色数组</h5><p>提取主题色的过程前半段与我们上面的场景一致，我们都是需要先获取到图片的像素数组，代码可以参考上面，这里不再赘述。</p><h5 id="2-整理有效像素数组"><a href="#2-整理有效像素数组" class="headerlink" title="2. 整理有效像素数组"></a>2. 整理有效像素数组</h5><p><code>imgData</code> 就是我们要提取图片的像素数组；<code>pixelCount</code> 是像素点的数量，也就是图片的尺寸；<code>quality</code> 是精度，因为很多时候其实我们没必要挨着去将每个像素点取出来，从下面的方法中我们能看出，该值越大我们就会跳过更多的像素点，即获取到的色值就会越不准确，但是同时处理速度也会有所上升，所以需要做权衡</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createPixelArray = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  imgData,</span></span></span><br><span class="line"><span class="params"><span class="function">  pixelCount,</span></span></span><br><span class="line"><span class="params"><span class="function">  quality,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;: CreatePixelArrayParams</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pixels = imgData;</span><br><span class="line">  <span class="keyword">const</span> pixelArray = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以适合量化函数的数组格式存储 RGB 值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, offset, r, g, b, a; i &lt; pixelCount; i = i + quality) &#123;</span><br><span class="line">    offset = i * <span class="number">4</span>;</span><br><span class="line">    r = pixels[offset + <span class="number">0</span>];</span><br><span class="line">    g = pixels[offset + <span class="number">1</span>];</span><br><span class="line">    b = pixels[offset + <span class="number">2</span>];</span><br><span class="line">    a = pixels[offset + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 像素要是不透明的和半透明以上的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&quot;undefined&quot;</span> || a &gt;= <span class="number">125</span>) &#123;</span><br><span class="line">      <span class="comment">// 像素不能是太贴近白色的</span></span><br><span class="line">      <span class="keyword">if</span> (!(r &gt; <span class="number">250</span> &amp;&amp; g &gt; <span class="number">250</span> &amp;&amp; b &gt; <span class="number">250</span>)) &#123;</span><br><span class="line">        pixelArray.push([r, g, b]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pixelArray;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们需要把获取到像素数组做一些处理，因为我们只是提取主题色，所以我们不需要过于透明的颜色。即 <code>rgba</code> 中 <code>a</code> 值不存在或小于 125 的。<code>rgb</code> 三个值同时大于 250 的我们也不需要，因为我们认为他过于贴近白色，去除掉这部分不会影响提取效果，还可以提高处理效率。</p><h5 id="3-量化颜色数组，并返回调色板"><a href="#3-量化颜色数组，并返回调色板" class="headerlink" title="3.量化颜色数组，并返回调色板"></a>3.量化颜色数组，并返回调色板</h5><p>有关颜色提取的算法主要有：<code>最小差值法</code>、<code>中位切分法</code>、<code>八叉树算法</code> 等。这里使用了 <a href="https://github.com/olivierlesnicki/quantize">quantize</a> 包来处理颜色，这个包使用的是中位切分法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPalette = <span class="keyword">async</span> (&#123;</span><br><span class="line">  imgSrc,</span><br><span class="line">  colorCount = <span class="number">10</span>,</span><br><span class="line">  quality = <span class="number">10</span>,</span><br><span class="line">&#125;: GetPaletteParams) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> colorCount === <span class="string">&quot;undefined&quot;</span> ||</span><br><span class="line">    !<span class="built_in">Number</span>.isInteger(colorCount) ||</span><br><span class="line">    colorCount &lt; <span class="number">2</span> ||</span><br><span class="line">    colorCount &gt; <span class="number">20</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    colorCount = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> quality === <span class="string">&quot;undefined&quot;</span> ||</span><br><span class="line">    !<span class="built_in">Number</span>.isInteger(quality) ||</span><br><span class="line">    quality &lt; <span class="number">1</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    quality = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: imgData, <span class="attr">canvasSize</span>: pixelCount &#125; = <span class="keyword">await</span> getImgData(&#123;</span><br><span class="line">    imgSrc,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> pixelArray = createPixelArray(&#123;</span><br><span class="line">    imgData,</span><br><span class="line">    pixelCount,</span><br><span class="line">    <span class="attr">quality</span>: quality,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// quantize将像素数组进行量化，聚类，最终返回面板数组</span></span><br><span class="line">  <span class="comment">// 使用中位切分法</span></span><br><span class="line">  <span class="keyword">const</span> cmap = quantize(pixelArray, colorCount);</span><br><span class="line">  <span class="keyword">const</span> palette = cmap ? cmap.palette() : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> palette;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果如下：<img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/localhost_3000_theme-color%20(3).png" alt="localhost_3000_theme-color (3)"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>两个场景就介绍完了，一开始本来只是讲显示文字颜色这个功能的，但是后面发现这两个场景有很大的共同点，所以就把之前的方法整理了一下，重新进行了一次封装，上述讲到的所有功能方法我已经封装完毕并发布到 <code>npm</code> 并上传至 <code>github</code>，感兴趣的朋友可以看代码，仓库地址：<a href="https://github.com/chanceyliu/react-img-contrast/tree/master">https://github.com/chanceyliu/react-img-contrast/tree/master</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本片文章主要涉及两个场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 根据图片的平均色值获取文字的最佳显示颜色&lt;/li&gt;
&lt;li&gt; 提取图片的主题色&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、根据图片的平均色值获取文字的最佳显示颜色&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.chanceyliu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="canvas react" scheme="https://blog.chanceyliu.com/tags/canvas-react/"/>
    
  </entry>
  
  <entry>
    <title>发布订阅模式</title>
    <link href="https://blog.chanceyliu.com/2021/09/22/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.chanceyliu.com/2021/09/22/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-09-22T14:26:25.000Z</published>
    <updated>2021-09-22T14:29:28.533Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>业务场景：有 A 和 B 两个表格，互为兄弟组件，当 A 中某个事件调用完成之后需要触发 B 表格中的更新。</p><p>解决办法：使用<strong>发布-订阅模式</strong>，在 A 表格中订阅事件，等 B 表格中发布后通知它</p></blockquote><p>代码实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriptionPublish</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> eventMap: Record&lt;<span class="built_in">string</span>, (<span class="function">(<span class="params">params: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span>)[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.eventMap = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 订阅函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>key 订阅事件Key值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>handler 订阅事件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">on</span>(<span class="params">key: <span class="built_in">string</span>, handler: (params: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.eventMap[key]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.eventMap[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.eventMap[key].push(handler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发布函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>key 订阅事件Key值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>params 要发步到订阅事件中的参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">emit</span>(<span class="params">key: <span class="built_in">string</span>, params?: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.eventMap[key]) &#123;</span><br><span class="line">      <span class="built_in">this</span>.eventMap[key].forEach(<span class="function">(<span class="params">handler</span>) =&gt;</span> &#123;</span><br><span class="line">        handler(params);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 销毁函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="variable">key</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="variable">handler</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">key: <span class="built_in">string</span>, handler: (params: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.eventMap[key]) &#123;</span><br><span class="line">      <span class="comment">// 如果该队列存在，先找到要删除函数的位置，然后剔除</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">this</span>.eventMap[key].indexOf(handler);</span><br><span class="line">      res !== -<span class="number">1</span> &amp;&amp; <span class="built_in">this</span>.eventMap[key].splice(res, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个全局实例</span></span><br><span class="line"><span class="keyword">const</span> defaultEvent = <span class="keyword">new</span> SubscriptionPublish();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defaultEvent;</span><br></pre></td></tr></table></figure><p>代码使用：我们在写完<strong>发布-订阅</strong>类的代码之后在里面创建一个实例，用作全局使用</p><ul><li>A 表格</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ApiTable: FC = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...省略其他业务代码</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 刷新列表方法</span></span><br><span class="line">  <span class="keyword">const</span> loadApi = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    table.reload();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 订阅刷新方法</span></span><br><span class="line">    defaultEvent.on(<span class="string">&quot;loadApi&quot;</span>, loadApi);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 组件销毁时，销毁订阅函数</span></span><br><span class="line">      defaultEvent.remove(<span class="string">&quot;loadApi&quot;</span>, loadApi);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span>// ...业务代码<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ApiTable;</span><br></pre></td></tr></table></figure><ul><li>B 表格</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Index: FC = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...省略其他业务代码</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里是要触发发布的地方</span></span><br><span class="line">  <span class="keyword">const</span> handleSubmit = useCallback(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...省略其他逻辑处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布后，订阅函数调用</span></span><br><span class="line">    defaultEvent.emit(<span class="string">&#x27;loadApi&#x27;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  <span class="comment">// ...业务代码</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Index;</span><br></pre></td></tr></table></figure><p><strong>发布-订阅模式</strong>专门用于解决兄弟组件间通信的问题，不局限于 <code>React</code> ，其他的地方原理是一样的，同样可以解决类似问题的还有<strong>观察者模式</strong>。我这里只是针对于我这样的业务场景下写的。</p><p>提到<strong>发布-订阅模式</strong>就必然绕不开<strong>观察者模式</strong>，两者非常相似，很大的一个区别是<strong>发布-订阅模式</strong>多了一个第三方，即事件中心。在这个过程中，我们只需要维护一个事件中心，发布者不关心谁订阅了我的事件，订阅者不关心发布者是谁，通过事件中心来通知订阅者。</p><p><img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/1460000019722068.jpeg" alt="观察者模式 VS 发布订阅模式"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;业务场景：有 A 和 B 两个表格，互为兄弟组件，当 A 中某个事件调用完成之后需要触发 B 表格中的更新。&lt;/p&gt;
&lt;p&gt;解决办法：使用&lt;strong&gt;发布-订阅模式&lt;/strong&gt;，在 A 表格中订阅事件，等 B 表格中发布后通知它&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.chanceyliu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="设计模式" scheme="https://blog.chanceyliu.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Typora结合PicGo上传图片</title>
    <link href="https://blog.chanceyliu.com/2021/09/21/Typora%E7%BB%93%E5%90%88PicGo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <id>https://blog.chanceyliu.com/2021/09/21/Typora%E7%BB%93%E5%90%88PicGo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</id>
    <published>2021-09-21T07:30:41.000Z</published>
    <updated>2021-09-21T07:32:14.009Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：使用 Typora 工具编写 markdown 文件的时候，引用截图或者本地图片，这些图片资源都是存储在本地的，当你想将文档直接复制粘贴到外部供别人观看的时候，就会存在图片资源找不到的情况。于是我们可以通过 PicGo 结合腾讯云的 Cos 服务建立我们自己的图床，并通过设置，当 Typora 粘贴图片时，直接上传至 cos 上。这样图片资源就不会失效了。</p></blockquote><ul><li>官方配置手册：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E8%85%BE%E8%AE%AF%E4%BA%91cos">https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E8%85%BE%E8%AE%AF%E4%BA%91cos</a></li></ul><ol><li><p>下载 PicGo，这是 GitHub <a href="https://github.com/Molunerfinn/PicGo">地址</a></p></li><li><p>在腾讯云官网创建自己的 Cos 存储桶<img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/image-20210318143637691.png" alt="image-20210318143637691"></p></li><li><p>点击密钥管理，创建自己的 API 密钥<img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/image-20210318144536670.png" alt="image-20210318144536670"></p></li><li><p>填写对应信息<img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/image-20210318145255406.png" alt="image-20210318145255406" style="zoom:150%;" /></p><ul><li>APPID、SecretId 和 SecretKey 获取<img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/image-20210318145552036.png" alt="image-20210318145552036"></li><li>存储空间名和存储区域<img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/image-20210318145705774.png" alt="image-20210318145705774"></li><li>存储路径，需要点开存储桶，在该桶下创建一个新文件，然后填写路径</li></ul></li><li><p>设置 Typora<img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/image-20210318145904880.png" alt="image-20210318145904880"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：使用 Typora 工具编写 markdown 文件的时候，引用截图或者本地图片，这些图片资源都是存储在本地的，当你想将文档直接复制粘贴到外部供别人观看的时候，就会存在图片资源找不到的情况。于是我们可以通过 PicGo 结合腾讯云的 Cos </summary>
      
    
    
    
    <category term="其他" scheme="https://blog.chanceyliu.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Typora" scheme="https://blog.chanceyliu.com/tags/Typora/"/>
    
    <category term="PicGo" scheme="https://blog.chanceyliu.com/tags/PicGo/"/>
    
  </entry>
  
  <entry>
    <title>主机DIY</title>
    <link href="https://blog.chanceyliu.com/2021/09/21/%E4%B8%BB%E6%9C%BADIY/"/>
    <id>https://blog.chanceyliu.com/2021/09/21/%E4%B8%BB%E6%9C%BADIY/</id>
    <published>2021-09-21T07:30:41.000Z</published>
    <updated>2021-09-21T07:31:36.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-CPU："><a href="#1-CPU：" class="headerlink" title="1. CPU："></a>1. CPU：</h3><ul><li><p><strong>散片与盒装：</strong>散片价格便宜，但容易踩坑，如果散片与盒装价格差距不大的情况下买盒装。选择散片的话需要好好调研一下去什么店铺买。（CPU 只存在二手，基本上可以说不存在造假的情况）</p></li><li><p><strong>如何查看型号（Intel）：</strong><img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/image-20201219193405412.png" alt="image-20201219193405412"></p><ul><li>性能：700 代表性能等级，越高代表性能越好</li><li>后缀：K——&gt;&gt;可超频，F——&gt;&gt;没有核心。可超频的 CPU 需要选择支持超频的主板，否则无法超频。没有核显的 F 版 CPU 要搭配独立显卡才能开机点亮平面。</li></ul></li><li><p><strong>如何查看型号（AMD）：</strong><img src="https://chanceyliu-1301861058.cos.ap-chongqing.myqcloud.com/markdown/image-20201219201451745.png" alt="image-20201219201451745"></p><ul><li>后缀：字母 G 表示有核显，字母 X 没有明确意思，一般性能强一点。如 R5 3600X 比 R5 3600 性能高一点，主频高一点。XT 代表官方优选型号，拥有更强的超频能力。</li></ul></li><li><p><strong>暂定计划：</strong></p><table><thead><tr><th>型号</th><th>功率</th><th>核心线程</th><th>主频</th><th align="center">京东-盒装价格</th></tr></thead><tbody><tr><td>i7-10700F</td><td>65W</td><td>8 核 16 线程</td><td>2.90 GHz</td><td align="center">2099（1859 散）</td></tr><tr><td><span style="color:red">i7-10700</span></td><td>65W</td><td>8 核 16 线程</td><td>2.90 GHz</td><td align="center">2399（1899 散）</td></tr><tr><td><span style="color:red">R5-5600X</span></td><td>65W</td><td>6 核 12 线程</td><td>3.7GHz</td><td align="center">2129（到 2000 以内才能算有性价比）</td></tr><tr><td>R5-3700X</td><td>65W</td><td>8 核 16 线程</td><td>3.6GHz</td><td align="center">2449</td></tr></tbody></table></li><li><p><strong>参考链接：</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/157597328">https://zhuanlan.zhihu.com/p/157597328</a></li></ul></li></ul><h3 id="2-主板："><a href="#2-主板：" class="headerlink" title="2.主板："></a>2.主板：</h3><ul><li><p><strong>大厂商：</strong>微星，华擎，技嘉，七彩虹</p></li><li><p><strong>超频：</strong>Z 系列的主板才支持 Intel CPU 超频。锐龙 CPU 则无需考虑这一点</p></li><li><p><strong>注意点：</strong></p><ul><li>供电能力</li><li>接口完整度</li><li>预算尽量充足不要节省</li><li><strong>主板规格一定要和机箱协调好</strong></li></ul></li><li><p><strong>暂定计划：</strong></p><table><thead><tr><th>产品名</th><th>WI-FI</th><th>超频</th><th align="center">价格</th></tr></thead><tbody><tr><td>微星（MSI）MAG B460M MORTAR WIFI 迫击炮电脑主板</td><td>是</td><td>否</td><td align="center">849</td></tr><tr><td>Z490 系列（暂不考虑超频）</td><td>-</td><td>是</td><td align="center">-</td></tr></tbody></table></li><li><p><strong>参考链接：</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/83516346">https://zhuanlan.zhihu.com/p/83516346</a></li></ul></li></ul><h3 id="3-显卡：（待考察）"><a href="#3-显卡：（待考察）" class="headerlink" title="3.显卡：（待考察）"></a>3.显卡：（待考察）</h3><h3 id="4-内存："><a href="#4-内存：" class="headerlink" title="4.内存："></a>4.内存：</h3><ul><li><strong>品牌：</strong>海力士、镁光</li><li><strong>颗粒：</strong></li><li><strong>注意：</strong>内存条频率会受限于主板，在主板参数中可以看到最高能支持的内存条频率。</li><li><strong>参考链接：</strong><ul><li><a href="https://zhuanlan.zhihu.com/p/83502558">https://zhuanlan.zhihu.com/p/83502558</a></li></ul></li></ul><h3 id="5-电源："><a href="#5-电源：" class="headerlink" title="5.电源："></a>5.电源：</h3><ul><li><strong>品牌：</strong><ul><li>一线：振华、海韵</li><li>二线：安钛克、全汉、台达、EVGA、酷冷至尊</li></ul></li><li><strong>功率算法：</strong>（cpu 功耗+显卡功耗+50W）×1.5=额定功率</li><li><strong>模组：</strong><ul><li>非模组：非模组电源的线是不可拆卸的，非模组电源的线有很多是多余的</li><li>半模组：半模组电源的主板供电线和 CPU 供电线不可拆卸。但是其余的的供电线是和全模组一样可以拆卸的</li><li>全模组：全模组电源的线都是可以拆卸的，可以用什么线插什么线</li></ul></li><li><strong>参考链接：</strong><ul><li><a href="https://zhuanlan.zhihu.com/p/83498194">https://zhuanlan.zhihu.com/p/83498194</a></li></ul></li></ul><h3 id="6-硬盘："><a href="#6-硬盘：" class="headerlink" title="6.硬盘："></a>6.硬盘：</h3><ul><li><p><strong>协议：</strong>建议选择 M.2 NVMe。读写速度快，路径短。注意要求主板上有相对应的接口</p></li><li><p><strong>品牌：</strong>三星、凯侠、西数</p></li><li><p><strong>参考链接：</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/83510679">https://zhuanlan.zhihu.com/p/83510679</a></li></ul></li></ul><h3 id="7-CPU-散热"><a href="#7-CPU-散热" class="headerlink" title="7.CPU 散热"></a>7.CPU 散热</h3><ul><li><p><strong>类型：</strong></p><ul><li>水冷：有漏液等隐患，但是厂商大都能解决（暂不考虑）</li><li>风冷：有些 CPU 会自带散热器，只是不一定给力。所以可以考虑自己购买。要注意的地方是要保证机箱通风，将热量散出去</li></ul></li><li><p><strong>参考链接：</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/82613024">https://zhuanlan.zhihu.com/p/82613024</a></li></ul></li></ul><h3 id="8-机箱"><a href="#8-机箱" class="headerlink" title="8.机箱"></a>8.机箱</h3><ul><li><strong>规格：</strong>E-ATX&gt;ATX&gt;M-ATX&gt;ITX</li><li><strong>注意：</strong>机箱规格一定要和主板规格协调好</li><li><strong>参考链接：</strong><ul><li><a href="https://zhuanlan.zhihu.com/p/83627944">https://zhuanlan.zhihu.com/p/83627944</a></li></ul></li></ul><h3 id="9-机箱风扇：（待考察）"><a href="#9-机箱风扇：（待考察）" class="headerlink" title="9.机箱风扇：（待考察）"></a>9.机箱风扇：（待考察）</h3><ul><li><strong>数量：</strong>建议进风 2 个，排风 1 个</li><li><strong>风道规划：</strong>没想好，先记住热空气会上浮，所以进风建议安在背面靠下，出风安在前方靠上或者顶部</li><li><strong>建议：</strong>风扇规格买一样的</li><li><strong>安装方式：</strong>（待收集）</li></ul><h3 id="10-装系统"><a href="#10-装系统" class="headerlink" title="10.装系统"></a>10.装系统</h3><ul><li><strong>方式：</strong>见知乎 “电脑 DIY” 收藏夹</li></ul><h3 id="11-配置清单"><a href="#11-配置清单" class="headerlink" title="11.配置清单"></a>11.配置清单</h3><table><thead><tr><th></th><th align="center">Intel CPU 配机方案（8000 以内）</th><th></th></tr></thead><tbody><tr><td>配件名称</td><td align="center">品牌型号</td><td>参考价格</td></tr><tr><td>CPU</td><td align="center">i7-10700F（散片）/（<span style="color:red">板 U 套装 2749</span>）</td><td>1859</td></tr><tr><td>主板</td><td align="center">微星（MSI）MAG B460M MORTAR WIFI 迫击炮电脑主板</td><td>849</td></tr><tr><td>内存条</td><td align="center">英睿达（Crucial）16GB(8G×2)套装 DDR4 3200 / 美商海盗船(USCORSAIR)DDR4 3200 16GB(8G×2)</td><td>499</td></tr><tr><td>显卡</td><td align="center">RTX 2060Super / RTX 3060Ti</td><td>3000</td></tr><tr><td>CPU 散热</td><td align="center">九州风神 （DEEPCOOL）大霜塔 CPU 散热器</td><td>219</td></tr><tr><td>固态硬盘</td><td align="center">西部数据 SN750 500GB SSD 固态硬盘 M.2 接口(NVMe 协议)</td><td>579</td></tr><tr><td>电源</td><td align="center">振华（SUPER FLOWER）额定 650W LEADEX HG 650W 电脑电源</td><td>639</td></tr><tr><td>机箱</td><td align="center">爱国者（aigo）炫影 3 京东定制版 黑色电脑机箱（标配 3 只 RGB 风扇/蜂窝玻璃面板/ATX 主板/360 冷排）</td><td>239</td></tr><tr><td>总计</td><td align="center"></td><td></td></tr></tbody></table><h3 id="装机视频"><a href="#装机视频" class="headerlink" title="装机视频"></a>装机视频</h3><ul><li>见 B 站 “电脑 DIY” 收藏夹</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-CPU：&quot;&gt;&lt;a href=&quot;#1-CPU：&quot; class=&quot;headerlink&quot; title=&quot;1. CPU：&quot;&gt;&lt;/a&gt;1. CPU：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;散片与盒装：&lt;/strong&gt;散片价格便宜，但容易踩坑，如果散片与盒装</summary>
      
    
    
    
    <category term="其他" scheme="https://blog.chanceyliu.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="电脑" scheme="https://blog.chanceyliu.com/tags/%E7%94%B5%E8%84%91/"/>
    
    <category term="DIY" scheme="https://blog.chanceyliu.com/tags/DIY/"/>
    
  </entry>
  
  <entry>
    <title>Promise模拟请求</title>
    <link href="https://blog.chanceyliu.com/2021/09/20/Promise%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82/"/>
    <id>https://blog.chanceyliu.com/2021/09/20/Promise%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82/</id>
    <published>2021-09-20T07:30:41.000Z</published>
    <updated>2021-09-21T07:32:36.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise-模拟请求"><a href="#Promise-模拟请求" class="headerlink" title="Promise 模拟请求"></a>Promise 模拟请求</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​ 在正常开发需求的过程中，我们开发前端页面是和后端开发接口同步进行的，经常性的会遇到后端接口还没完成的情况下需要模拟请求来看一下页面完整的效果，本篇写的是自己使用 promise 模拟一个异步请求。</p><h4 id="1-模拟请求"><a href="#1-模拟请求" class="headerlink" title="1. 模拟请求"></a>1. 模拟请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mockRequest = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        data.push(&#123;</span><br><span class="line">          <span class="attr">id</span>: i.toString(),</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-获取数据"><a href="#2-获取数据" class="headerlink" title="2. 获取数据"></a>2. 获取数据</h4><ul><li>async/await 同步写法获取</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> mockRequest();</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// [&#123;id: &#x27;1&#x27;&#125;,&#123;id: &#x27;2&#x27;&#125;, ... ,&#123;id: &#x27;9&#x27;&#125;]</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>链式写法获取</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loadData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mockRequest().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// [&#123;id: &#x27;1&#x27;&#125;,&#123;id: &#x27;2&#x27;&#125;, ... ,&#123;id: &#x27;9&#x27;&#125;]</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Promise-模拟请求&quot;&gt;&lt;a href=&quot;#Promise-模拟请求&quot; class=&quot;headerlink&quot; title=&quot;Promise 模拟请求&quot;&gt;&lt;/a&gt;Promise 模拟请求&lt;/h3&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.chanceyliu.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Promise" scheme="https://blog.chanceyliu.com/tags/Promise/"/>
    
  </entry>
  
</feed>
